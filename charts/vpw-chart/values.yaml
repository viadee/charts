#
## viadee Unternehmensberatung AG
#

# Deploy chart:
#   1) Execute inside vpw-chart directory:
#       $ helm dependency update
#   2) Execute outside vpw-chart directory:
#       $ helm install vpw vpw-chart

# Override values of vpw-analyzer & vpw-pipeline of the viadee Process Warehouse.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

#
## ANALYZER
#
vpw-analyzer:

replicaCount: 1

image:
  repository: "public.ecr.aws/viadee/vpw-analyzer"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Specify labels
labels: {}

selectorLabels:
  # Name of whole application: viadee Process Warehouse (vpw)
  app: vpw
  # Analyzer as part of the viadee Process Warehouse (vpw)
  component: analyzer
  # Release name of deployment
  release: showcase

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

cloudsqlProxy:
  enabled: false
  name: cloudsql-proxy
  image: gcr.io/cloudsql-docker/gce-proxy:1.24.0
  command:
    arg0: '/cloud_sql_proxy'
    arg1: '-instances=example:europe-west3:example=tcp:5432'
    arg2: '-credential_file=/secrets/cloudsql/credentials.json'
  args: []
  runAsUser: 2  # non-root user
  allowPrivilegeEscalation: false

volumes:
  vpwCloudProxySecret:
    name: "vpw-analyzer"
    mountPath: "/secrets/cloudsql"
    readOnly: true

# Analyzer containers' liveness probe.
livenessProbe:
  httpGet:
    path: "/"
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 3
  failureThreshold: 5

# Analyzer containers' readiness probe.
readinessProbe:
  httpGet:
    path: "/actuator/health"
    port: http
  initialDelaySeconds: 60
  periodSeconds: 2
  timeoutSeconds: 2
  failureThreshold: 1

# Service parameters
service:
  type: ClusterIP   # Kubernetes Service type
  port: 80          # Exposed port
  targetPort: 8080  # Exposed port of container (analyzer application)

# Ingress parameters
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
  #  - host: chart-example.local
  #    paths:
  #      - path: /
  #        pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 380Mi
  # requests:
  #   cpu: 100m
#   memory: 380Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

environment:
  secret:
    # Specify external secret within your kubernetes cluster, which you want to use to connect to your db
    externalPostgresqlSecret: false
    externalPostgresqlSecretData:
      name: name
      key: key
    postgresql_pwd: "password"
    elastic_pwd: "password"
    elastic_username: "username"
    cloud_sql_credentials: placeholder
  # Specify parameters of analyzer application
  configMap:
    # Spring elasticsearch rest uri in your environment
    spring_elasticsearch_rest_uris: "http://vpw-master:9200"
    # Log level of analyzer application (root)
    logging_level_root: "INFO"
    # DB Postgresql host name
    postgresql_host: "analyzer-postgres-postgresql"
    # DB Postgresql port name
    postgresql_port: "5433"
    # DB Postgresql database name
    postgresql_databasename: "vpw"
    # DB user name
    postgresql_user: "vpw"
    # Application (Tomcat) server port
    server_port: "8080"
    # Spring datasource hikari maximum pool size
    spring_datasource_hikari_maximumpoolsize: "5"
    # Spring datasource hikari minimum idle
    spring_datasource_hikari_minimumidle: "2"
    # Log level of analyzer application
    logging_level_de_viadee: "debug"

# Specify pod affinity
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: component
              operator: In
              values:
                - vpw-analyzer
        topologyKey: kubernetes.io/hostname

#
## PIPELINE
#
vpw-pipeline:

  replicaCount: 1

  image:
    repository: "public.ecr.aws/viadee/vpw-pipeline"
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  # Specify labels
  labels: {}

  selectorLabels:
    # Name of whole application: viadee Process Warehouse (vpw)
    app: vpw
    # Pipeline as part of the viadee Process Warehouse (vpw)
    component: pipeline
    # Release name of deployment
    release: showcase

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
  # runAsUser: 1000

  # Pipeline containers' liveness probe.
  livenessProbe:
    httpGet:
      path: "/status/alive"
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 2
    failureThreshold: 3

  # Pipeline containers' readiness probe.
  readinessProbe:
    httpGet:
      path: "/status/ready"
      port: http
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3

  # Service parameters
  service:
    enabled: false  # Enable oder disable usage of service
    type: ClusterIP # Kubernetes Service type
    port: 80        # Exposed port

  # Ingress parameters
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
    #  - host: chart-example.local
    #    paths:
    #      - path: /
    #        pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 64Mi
    # requests:
    #   cpu: 100m
  #   memory: 64Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  environment:
    secret:
      # PWD to connect to elasticsearch
      elastic_pwd: "password"
    # Specify parameters of pipeline application
    configMap:
      # Kafka bootstrap server address
      kafka_bootstrap_servers: "vpw-kafka-0.vpw-kafka-brokers.default.svc:9192"
      # Spring elasticsearch rest uri in your environment
      spring_elasticsearch_rest_uris: "http://vpw-master:9200"
      # Application (Tomcat) server port
      server_port: "8080"
      # URL endpoint of analyzer application within cluster
      process_definition_rest_url: "http://vpw-analyzer:80/processDefinitions"
      # Log level of pipeline application
      logging_level_root: "INFO"


#
## FRONTEND
#
vpw-frontend:

  replicaCount: 1

  image:
    repository: "public.ecr.aws/viadee/vpw-frontend"
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: "vpw-frontend"

  # Specify labels
  labels: {}

  selectorLabels:
    # Name of whole application: viadee Process Warehouse (vpw)
    app: vpw
    # Frontend as part of the viadee Process Warehouse (vpw)
    component: frontend
    # Release name of deployment
    release: showcase

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
  # runAsUser: 1000

  # Volumes
  volumes:
    basicAuthVolume:
      name: auth-secret-volume
      secretName: vpw-frontend-basic-auth-secret
      mountPath: /etc/basic_auth
      htpasswd: placeholder # Set a htpasswd to access frontend application

  # Frontend (nginx) containers' liveness probe.
  livenessProbe:
    httpGet:
      path: "/health"
      port: http
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 3
    failureThreshold: 5

  # Frontend (nginx) containers' readiness probe.
  readinessProbe:
    httpGet:
      path: "/health"
      port: http
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 3
    failureThreshold: 5

  # Service parameters
  service:
    type: ClusterIP   # Kubernetes Service type
    port: 8080        # Exposed port
    targetPort: 8080  # Exposed port of container (frontend application)

  # Ingress parameters
  ingress:
    enabled: true
    className: ""
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
    hosts:
      - host: example.com
        paths:
          - path:
            pathType: ImplementationSpecific
    tls:
      - secretName: tls-example-cloud
        hosts:
          - example.com

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
  #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: component
                operator: In
                values:
                  - vpw-frontend
          topologyKey: kubernetes.io/hostname


#
## POLLING-CLIENT
#
vpw-polling-client:

  replicaCount: 1

  image:
    repository: "public.ecr.aws/viadee/camunda-kafka-polling-client"
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""

  # Specify labels
  labels: { }

  selectorLabels:
    # Name of whole application: viadee Process Warehouse (vpw)
    app: vpw
    # Analyzer as part of the viadee Process Warehouse (vpw)
    component: polling-client
    # Release name of deployment
    release: showcase

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Annotations to add to the service account
    annotations: { }
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: { }

  podSecurityContext:
    fsGroup: 1000 # Write access for volume for appuser

  securityContext: { }
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  # Polling Client containers' liveness probe.
  livenessProbe:
    httpGet:
      path: /actuator/health
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 2
    periodSeconds: 15
    failureThreshold: 3

  # Polling Client containers' readiness probe.
  readinessProbe:
    httpGet:
      path: /actuator/health
      port: http
    initialDelaySeconds: 10
    timeoutSeconds: 2
    periodSeconds: 10
    failureThreshold: 5

  service:
    enabled: false
    type: ClusterIP
    port: 80

  ingress:
    enabled: false
    className: ""
    annotations: { }
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: [ ]
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: { }
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
  #   cpu: 100m
  #   memory: 128Mi

  # Volumes
  persistence:
    enabled: true
    storageClass: standard
    size: 1Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  environment:
    secret:
      # Camunda password for authentication
      camundaPassword: "password"
    configMap:
      # Camunda rest url to connect to camunda rest engine
      camundaRestUrl: http://camunda-webapp-camunda-bpm-platform:8080/engine-rest/
      # Camunda username for authentication
      camundaRestUsername: username
      # Application (Tomcat) server port
      serverPort: 8081
      # Time zone used for formatting timestamps provided to camunda rest api (Default: System timezone)
      timeZone: CEST
      # Kafka bootstrap server url to connect to kafka broker
      kafkaBootstrapServers: vpw-kafka-0.vpw-kafka-brokers.default.svc:9092
      # Intervals of data polling
      pollingRuntimeDataIntervalInMs: 30000
      # Last polled file
      pollingRuntimeDataLastPolledFile: /data/lastPolled-runtime.properties
      # Last polled repo
      pollingRepositoryDataLastPolledFile: data/lastPolled-repository.properties
      # Initial start time the polling of runtime data (only relevant for initial polling); format: "yyyy-MM-dd HH:mm:ss". Default is the current time.
      pollingRuntimeDataInitialTimestamp: "2000-01-01 00:00:00"
      # Initial start time the polling of repository data (only relevant for initial polling); format: "yyyy-MM-dd HH:mm:ss. Default is the current time."
      pollingRepositoryDataInitialTimestamp: "2000-01-01 00:00:00"
      # Intervals of repository polling
      pollingRepositoryDataIntervalInMs: 30000
      # Log level
      logLevel: INFO
    #Add name-value pairs here to inject them dynamically into the configmap.
    env:
      # Activate spring profile "rest"
      - name: SPRING_PROFILES_ACTIVE
        value: rest

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
