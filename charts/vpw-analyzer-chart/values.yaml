#
## viadee Unternehmensberatung AG
#

# Default values for vpw-analyzer of the viadee Process Warehouse.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: "public.ecr.aws/viadee/vpw-analyzer"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Specify labels
labels: {}

selectorLabels:
  # Name of whole application: viadee Process Warehouse (vpw)
  app: vpw
  # Analyzer as part of the viadee Process Warehouse (vpw)
  component: analyzer
  # Release name of deployment
  release: showcase

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

cloudsqlProxy:
  enabled: false
  name: cloudsql-proxy
  image: example.com/image
  command: []
  runAsUser: 2  # non-root user
  allowPrivilegeEscalation: false

volumes:
  vpwCloudProxySecret:
    name: "vpw-analyzer"
    mountPath: "/secrets/cloudsql"
    readOnly: true

# Analyzer containers' liveness probe.
livenessProbe:
  httpGet:
    path: "/"
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 3
  failureThreshold: 5

# Analyzer containers' readiness probe.
readinessProbe:
  httpGet:
    path: "/actuator/health"
    port: http
  initialDelaySeconds: 60
  periodSeconds: 2
  timeoutSeconds: 2
  failureThreshold: 1

# Service parameters
service:
  type: ClusterIP   # Kubernetes Service type
  port: 80          # Exposed port
  targetPort: 8080  # Exposed port of container (analyzer application)

# Ingress parameters
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
  #  - host: chart-example.local
  #    paths:
  #      - path: /
  #        pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 380Mi
  # requests:
  #   cpu: 100m
  #   memory: 380Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

environment:
  secret:
    # Specify external secret within your kubernetes cluster, which you want to use to connect to your db
    externalPostgresqlSecret: false
    externalPostgresqlSecretData:
      name: name
      key: key
    postgresql_pwd: "password"
    elastic_pwd: "password"
    elastic_username: "username"
    cloud_sql_credentials: placeholder
  # Specify parameters of analyzer application
  configMap:
    # Spring elasticsearch rest uri in your environment
    spring_elasticsearch_rest_uris: "http://vpw-master:9200"
    # Log level of analyzer application (root)
    logging_level_root: "INFO"
    # DB Postgresql host name
    postgresql_host: "analyzer-postgres-postgresql"
    # DB Postgresql port name
    postgresql_port: "5433"
    # DB Postgresql database name
    postgresql_databasename: "vpw"
    # DB user name
    postgresql_user: "vpw"
    # Application (Tomcat) server port
    server_port: "8080"
    # Spring datasource hikari maximum pool size
    spring_datasource_hikari_maximumpoolsize: "5"
    # Spring datasource hikari minimum idle
    spring_datasource_hikari_minimumidle: "2"
    # Log level of analyzer application
    logging_level_de_viadee: "debug"

# Specify pod affinity
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: component
              operator: In
              values:
                - vpw-analyzer
        topologyKey: kubernetes.io/hostname